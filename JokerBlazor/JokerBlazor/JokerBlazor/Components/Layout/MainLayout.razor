@using JokerBlazor.Services
@inherits LayoutComponentBase
@inject DarkModeService DarkModeService
@inject ILogger<MainLayout> Logger

<MudThemeProvider @ref="@_mudThemeProvider" IsDarkMode="@DarkModeService.IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
        <MudSpacer />
        <MudMenu FullWidth="false" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Edge="Edge.End">
            <ActivatorContent>
                <MudChip T="string" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit">
                    Options
                </MudChip>
            </ActivatorContent>
            <ChildContent>
                <MudSwitch @bind-Value="DarkModeService.IsDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="@_label" />
                <MudNavLink Href="/about" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Info" IconColor="Color.Inherit">About</MudNavLink>
            </ChildContent>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Joker's Manor</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    // Side Panel Drawer Toggle
    private bool _drawerOpen = true;
    private void DrawerToggle() => _drawerOpen = !_drawerOpen;

    // Light/Dark Mode Toggle
    private MudThemeProvider _mudThemeProvider = new MudThemeProvider();
    private string _label = string.Empty;

    protected override void OnInitialized()
    {
        _label = DarkModeService.IsDarkMode ? "Dark Mode" : "Light Mode";
        DarkModeService.OnChange += OnThemeChanged;
    }

    public void Dispose()
    {
        DarkModeService.OnChange -= OnThemeChanged;
    }

    private void OnThemeChanged()
    {
        try
        {
            _label = DarkModeService.IsDarkMode ? "Dark Mode" : "Light Mode";
            Logger.LogInformation("OnThemeChanged: {label}", _label);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred in OnThemeChanged");
        }
    }
}